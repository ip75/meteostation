// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/api/meteostation.proto

package meteostation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeteostationService_GetMeteoData_FullMethodName = "/meteo.service.MeteostationService/GetMeteoData"
)

// MeteostationServiceClient is the client API for MeteostationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeteostationServiceClient interface {
	GetMeteoData(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*MeteoData, error)
}

type meteostationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeteostationServiceClient(cc grpc.ClientConnInterface) MeteostationServiceClient {
	return &meteostationServiceClient{cc}
}

func (c *meteostationServiceClient) GetMeteoData(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*MeteoData, error) {
	out := new(MeteoData)
	err := c.cc.Invoke(ctx, MeteostationService_GetMeteoData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteostationServiceServer is the server API for MeteostationService service.
// All implementations should embed UnimplementedMeteostationServiceServer
// for forward compatibility
type MeteostationServiceServer interface {
	GetMeteoData(context.Context, *Filter) (*MeteoData, error)
}

// UnimplementedMeteostationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMeteostationServiceServer struct {
}

func (UnimplementedMeteostationServiceServer) GetMeteoData(context.Context, *Filter) (*MeteoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeteoData not implemented")
}

// UnsafeMeteostationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeteostationServiceServer will
// result in compilation errors.
type UnsafeMeteostationServiceServer interface {
	mustEmbedUnimplementedMeteostationServiceServer()
}

func RegisterMeteostationServiceServer(s grpc.ServiceRegistrar, srv MeteostationServiceServer) {
	s.RegisterService(&MeteostationService_ServiceDesc, srv)
}

func _MeteostationService_GetMeteoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteostationServiceServer).GetMeteoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteostationService_GetMeteoData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteostationServiceServer).GetMeteoData(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// MeteostationService_ServiceDesc is the grpc.ServiceDesc for MeteostationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeteostationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meteo.service.MeteostationService",
	HandlerType: (*MeteostationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeteoData",
			Handler:    _MeteostationService_GetMeteoData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/meteostation.proto",
}
